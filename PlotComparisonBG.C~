#include <stdlib.h>

void PlotComparisonBG() {
  TFile *outfile =new TFile("/w/work3/home/chris/LatestAnalysisRuns/Data/DataJul18/HistoSelector/Pi0Analysis/ChrisResultsBGComparison.root","recreate");
  vector<Double_t> VecAllChrisSigma;
  vector<Double_t> VecAllChrisEg;
  vector<Double_t> VecAllChrisCosth;
  vector<TString> VecAllChrisType;
  vector<Double_t> VecAllChrisSigmaErr;
  vector<Double_t> VecAllChrisEgErr;
  vector<Double_t> VecAllChrisCosthErr;
	//Timing weights only
  vector<Double_t> VecAllChrisSigmaTiming;
  vector<Double_t> VecAllChrisEgTiming;
  vector<Double_t> VecAllChrisCosthTiming;
  vector<TString> VecAllChrisTypeTiming;
  vector<Double_t> VecAllChrisSigmaErrTiming;
  vector<Double_t> VecAllChrisEgErrTiming;
  vector<Double_t> VecAllChrisCosthErrTiming;
	//Inv weights only
  vector<Double_t> VecAllChrisSigmaInv;
  vector<Double_t> VecAllChrisEgInv;
  vector<Double_t> VecAllChrisCosthInv;
  vector<TString> VecAllChrisTypeInv;
  vector<Double_t> VecAllChrisSigmaErrInv;
  vector<Double_t> VecAllChrisEgErrInv;
  vector<Double_t> VecAllChrisCosthErrInv;
	//SpecMom<100MeV
  vector<Double_t> VecAllChrisSigmaLess;
  vector<Double_t> VecAllChrisEgLess;
  vector<Double_t> VecAllChrisCosthLess;
  vector<TString> VecAllChrisTypeLess;
  vector<Double_t> VecAllChrisSigmaErrLess;
  vector<Double_t> VecAllChrisEgErrLess;
  vector<Double_t> VecAllChrisCosthErrLess;
	//SpecMom>100Mev
  vector<Double_t> VecAllChrisSigmaGreater;
  vector<Double_t> VecAllChrisEgGreater;
  vector<Double_t> VecAllChrisCosthGreater;
  vector<TString> VecAllChrisTypeGreater;
  vector<Double_t> VecAllChrisSigmaErrGreater;
  vector<Double_t> VecAllChrisEgErrGreater;
  vector<Double_t> VecAllChrisCosthErrGreater;
	//My Results
  Double_t AllChrisSigma;
  Double_t AllChrisEg;
  Double_t AllChrisCosth;
  TString AllChrisType;
  Double_t AllChrisSigmaErr;
  Double_t AllChrisEgErr;
  Double_t AllChrisCosthErr;
	//Timing Weights
  Double_t AllChrisSigmaTiming;
  Double_t AllChrisEgTiming;
  Double_t AllChrisCosthTiming;
  TString AllChrisTypeTiming;
  Double_t AllChrisSigmaErrTiming;
  Double_t AllChrisEgErrTiming;
  Double_t AllChrisCosthErrTiming;
	//InvWeights
  Double_t AllChrisSigmaInv;
  Double_t AllChrisEgInv;
  Double_t AllChrisCosthInv;
  TString AllChrisTypeInv;
  Double_t AllChrisSigmaErrInv;
  Double_t AllChrisEgErrInv;
  Double_t AllChrisCosthErrInv;
	//SpecMom<100
  Double_t AllChrisSigmaLess;
  Double_t AllChrisEgLess;
  Double_t AllChrisCosthLess;
  TString AllChrisTypeLess;
  Double_t AllChrisSigmaErrLess;
  Double_t AllChrisEgErrLess;
  Double_t AllChrisCosthErrLess;
	//SpecMom>100
  Double_t AllChrisSigmaGreater;
  Double_t AllChrisEgGreater;
  Double_t AllChrisCosthGreater;
  TString AllChrisTypeGreater;
  Double_t AllChrisSigmaErrGreater;
  Double_t AllChrisEgErrGreater;
  Double_t AllChrisCosthErrGreater;
  //read in my results from text file
  std::ifstream inputFile("BGCutResultsNew.txt");
  std::string line;
  if (inputFile.is_open()){
    while(getline(inputFile, line) ){
      stringstream(line)>>AllChrisSigma >>AllChrisSigmaErr>>AllChrisEg>>AllChrisEgErr >> AllChrisCosth>>AllChrisCosthErr>> AllChrisType;
      VecAllChrisSigma.push_back(AllChrisSigma);
      VecAllChrisEg.push_back(AllChrisEg);
      VecAllChrisCosth.push_back(AllChrisCosth);
      VecAllChrisType.push_back(AllChrisType);
      VecAllChrisSigmaErr.push_back(AllChrisSigmaErr);
      VecAllChrisEgErr.push_back(AllChrisEgErr);
      VecAllChrisCosthErr.push_back(AllChrisCosthErr);
    }
  }
  //read in timingweights results from text file
  std::ifstream inputFileTiming("BGCutResultsNewTiming.txt");
  std::string lineTiming;
  if (inputFileTiming.is_open()){
    while(getline(inputFileTiming, lineTiming) ){
      stringstream(lineTiming)>>AllChrisSigmaTiming >>AllChrisSigmaErrTiming>>AllChrisEgTiming>>AllChrisEgErrTiming >> AllChrisCosthTiming>>AllChrisCosthErrTiming>> AllChrisTypeTiming;
      VecAllChrisSigmaTiming.push_back(AllChrisSigmaTiming);
      VecAllChrisEgTiming.push_back(AllChrisEgTiming);
      VecAllChrisCosthTiming.push_back(AllChrisCosthTiming);
      VecAllChrisTypeTiming.push_back(AllChrisTypeTiming);
      VecAllChrisSigmaErrTiming.push_back(AllChrisSigmaErrTiming);
      VecAllChrisEgErrTiming.push_back(AllChrisEgErrTiming);
      VecAllChrisCosthErrTiming.push_back(AllChrisCosthErrTiming);
    }
  }
  //read in InvWeights results from text file
  std::ifstream inputFileInv("BGCutResultsNewInv.txt");
  std::string lineInv;
  if (inputFileInv.is_open()){
    while(getline(inputFileInv, lineInv) ){
      stringstream(lineInv)>>AllChrisSigmaInv >>AllChrisSigmaErrInv>>AllChrisEgInv>>AllChrisEgErrInv >> AllChrisCosthInv>>AllChrisCosthErrInv>> AllChrisTypeInv;
      VecAllChrisSigmaInv.push_back(AllChrisSigmaInv);
      VecAllChrisEgInv.push_back(AllChrisEgInv);
      VecAllChrisCosthInv.push_back(AllChrisCosthInv);
      VecAllChrisTypeInv.push_back(AllChrisTypeInv);
      VecAllChrisSigmaErrInv.push_back(AllChrisSigmaErrInv);
      VecAllChrisEgErrInv.push_back(AllChrisEgErrInv);
      VecAllChrisCosthErrInv.push_back(AllChrisCosthErrInv);
    }
  }
  //read in my lessthan results from text file
  std::ifstream inputFileLess("BGCutResultsNewSpecMomLessThan100.txt");
  std::string lineLess;
  if (inputFileLess.is_open()){
    while(getline(inputFileLess, lineLess) ){
      stringstream(lineLess)>>AllChrisSigmaLess >>AllChrisSigmaErrLess>>AllChrisEgLess>>AllChrisEgErrLess >> AllChrisCosthLess>>AllChrisCosthErrLess>> AllChrisTypeLess;
      VecAllChrisSigmaLess.push_back(AllChrisSigmaLess);
      VecAllChrisEgLess.push_back(AllChrisEgLess);
      VecAllChrisCosthLess.push_back(AllChrisCosthLess);
      VecAllChrisTypeLess.push_back(AllChrisTypeLess);
      VecAllChrisSigmaErrLess.push_back(AllChrisSigmaErrLess);
      VecAllChrisEgErrLess.push_back(AllChrisEgErrLess);
      VecAllChrisCosthErrLess.push_back(AllChrisCosthErrLess);
    }
  }
  //read in my greaterthan results from text file
  std::ifstream inputFileGreater("BGCutResultsNewSpecMomGreaterThan100.txt");
  std::string lineGreater;
  if (inputFileGreater.is_open()){
    while(getline(inputFileGreater, lineGreater) ){
      stringstream(lineGreater)>>AllChrisSigmaGreater >>AllChrisSigmaErrGreater>>AllChrisEgGreater>>AllChrisEgErrGreater >> AllChrisCosthGreater>>AllChrisCosthErrGreater>> AllChrisTypeGreater;
      VecAllChrisSigmaGreater.push_back(AllChrisSigmaGreater);
      VecAllChrisEgGreater.push_back(AllChrisEgGreater);
      VecAllChrisCosthGreater.push_back(AllChrisCosthGreater);
      VecAllChrisTypeGreater.push_back(AllChrisTypeGreater);
      VecAllChrisSigmaErrGreater.push_back(AllChrisSigmaErrGreater);
      VecAllChrisEgErrGreater.push_back(AllChrisEgErrGreater);
      VecAllChrisCosthErrGreater.push_back(AllChrisCosthErrGreater);
    }
  }
	//My Results
Double_t ArrSigma[20];
Double_t ArrCosth[20];
Double_t ArrEg[20];
Double_t ArrSigmaErr[20];
Double_t ArrCosthErr[20];
Double_t ArrEgErr[20];
//Timing weights
Double_t ArrSigmaTiming[20];
Double_t ArrCosthTiming[20];
Double_t ArrEgTiming[20];
Double_t ArrSigmaErrTiming[20];
Double_t ArrCosthErrTiming[20];
Double_t ArrEgErrTiming[20];
//Inv Weights
Double_t ArrSigmaInv[20];
Double_t ArrCosthInv[20];
Double_t ArrEgInv[20];
Double_t ArrSigmaErrInv[20];
Double_t ArrCosthErrInv[20];
Double_t ArrEgErrInv[20];
//SpecMom<100
Double_t ArrSigmaLess[20];
Double_t ArrCosthLess[20];
Double_t ArrEgLess[20];
Double_t ArrSigmaErrLess[20];
Double_t ArrCosthErrLess[20];
Double_t ArrEgErrLess[20];
//SpecMom>100
Double_t ArrSigmaGreater[20];
Double_t ArrCosthGreater[20];
Double_t ArrEgGreater[20];
Double_t ArrSigmaErrGreater[20];
Double_t ArrCosthErrGreater[20];
Double_t ArrEgErrGreater[20];
for(Int_t i=0;i<11;i++){//Number of eg bins*Number of folders(rand,sig,cut1) 41*3
	for(Int_t j=0;j<20;j++){
	//MyResults
	ArrSigma[j] = VecAllChrisSigma[j+i*20];
	ArrCosth[j] = VecAllChrisCosth[j+i*20];
	ArrEg[j] = VecAllChrisEg[j+i*20];
	ArrSigmaErr[j] = VecAllChrisSigmaErr[j+i*20];
	ArrCosthErr[j] = VecAllChrisCosthErr[j+i*20];
	ArrEgErr[j] = VecAllChrisEgErr[j+i*20];
	//Timing Weights
	ArrSigmaTiming[j] = VecAllChrisSigmaTiming[j+i*20];
	ArrCosthTiming[j] = VecAllChrisCosthTiming[j+i*20];
	ArrEgTiming[j] = VecAllChrisEgTiming[j+i*20];
	ArrSigmaErrTiming[j] = VecAllChrisSigmaErrTiming[j+i*20];
	ArrCosthErrTiming[j] = VecAllChrisCosthErrTiming[j+i*20];
	ArrEgErrTiming[j] = VecAllChrisEgErrTiming[j+i*20];
	//InvWeights
	ArrSigmaInv[j] = VecAllChrisSigmaInv[j+i*20];
	ArrCosthInv[j] = VecAllChrisCosthInv[j+i*20];
	ArrEgInv[j] = VecAllChrisEgInv[j+i*20];
	ArrSigmaErrInv[j] = VecAllChrisSigmaErrInv[j+i*20];
	ArrCosthErrInv[j] = VecAllChrisCosthErrInv[j+i*20];
	ArrEgErrInv[j] = VecAllChrisEgErrInv[j+i*20];
	//MyResultsLess
	ArrSigmaLess[j] = VecAllChrisSigmaLess[j+i*20];
	ArrCosthLess[j] = VecAllChrisCosthLess[j+i*20];
	ArrEgLess[j] = VecAllChrisEgLess[j+i*20];
	ArrSigmaErrLess[j] = VecAllChrisSigmaErrLess[j+i*20];
	ArrCosthErrLess[j] = VecAllChrisCosthErrLess[j+i*20];
	ArrEgErrLess[j] = VecAllChrisEgErrLess[j+i*20];
	//MyResultsGreater
	ArrSigmaGreater[j] = VecAllChrisSigmaGreater[j+i*20];
	ArrCosthGreater[j] = VecAllChrisCosthGreater[j+i*20];
	ArrEgGreater[j] = VecAllChrisEgGreater[j+i*20];
	ArrSigmaErrGreater[j] = VecAllChrisSigmaErrGreater[j+i*20];
	ArrCosthErrGreater[j] = VecAllChrisCosthErrGreater[j+i*20];
	ArrEgErrGreater[j] = VecAllChrisEgErrGreater[j+i*20];
}
	
auto c3 = new TCanvas("c3","c3");

TString PosTitle =Form("%f",ArrEg[0]) ;
TString PosName = Form("%f",ArrEg[0]) ;

	TGraph* SigmaPlot=new TGraphErrors(20,ArrCosth,ArrSigma,ArrCosthErr,ArrSigmaErr);
	TGraph* SigmaPlotLess=new TGraphErrors(20,ArrCosthLess,ArrSigmaLess,ArrCosthErrLess,ArrSigmaErrLess);
	TGraph* SigmaPlotGreater=new TGraphErrors(20,ArrCosthGreater,ArrSigmaGreater,ArrCosthErrGreater,ArrSigmaErrGreater);
	TGraph* SigmaPlotTiming=new TGraphErrors(20,ArrCosthTiming,ArrSigmaTiming,ArrCosthErrTiming,ArrSigmaErrTiming);
	TGraph* SigmaPlotInv=new TGraphErrors(20,ArrCosthInv,ArrSigmaInv,ArrCosthErrInv,ArrSigmaErrInv);
SigmaPlot->SetMarkerStyle(22);//Filled triangle(black(default)
SigmaPlotLess->SetMarkerStyle(29);//filled star(yellow)
SigmaPlotGreater->SetMarkerStyle(31);//line star (like two crosses at 90deg to each other)(blue)
SigmaPlotTiming->SetMarkerStyle(33);//diamond(light blue)
SigmaPlotInv->SetMarkerStyle(34);//Celtic cross(pink)
SigmaPlotLess->SetMarkerColor(5);//(yellow)
SigmaPlotGreater->SetMarkerColor(4);//(blue)
SigmaPlotTiming->SetMarkerColor(7);//light blue
SigmaPlotInv->SetMarkerColor(6);//pink
TMultiGraph* mg = new TMultiGraph();
mg->Add(SigmaPlot);
mg->Add(SigmaPlotLess);
mg->Add(SigmaPlotGreater);
mg->Add(SigmaPlotTiming);
mg->Add(SigmaPlotInv);
TString hTitle ="Sigma"+PosTitle; // +VecChrisType[i*20] +(TString) i ;
TString hName= "Sigma"+PosName; // +VecChrisType[i*20] + (TString)i ;
SigmaPlot->SetTitle(hTitle);
SigmaPlot->SetName(hName);
SigmaPlot->GetYaxis()->SetTitle("#Sigma");
SigmaPlot->GetXaxis()->SetTitle("Cos#theta_{CM} ");
SigmaPlot->GetXaxis()->CenterTitle();
mg->SetName(hName);
mg->SetTitle(hTitle+";Cos#theta_{CM};#Sigma");
mg->Draw("AP");
TLegend* leg = c3->BuildLegend();
mg->Write();
leg->Write();//Sort the writing of the legend later
}
outfile->Close();
} //closing main function
	

