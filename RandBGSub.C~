#include <stdlib.h>


  TFile *infile = TFile::Open("/w/work3/home/chris/LatestAnalysisRuns/Data/DataJul18/HistoSelector/Pi0Analysis/PPi0StrictCutsDariaPhiRandBGSub.root");


void RandBGSub() {
		
 
  TFile* ofile = new TFile("/w/work3/home/chris/LatestAnalysisRuns/Data/DataJul18/HistoSelector/Pi0Analysis/BGSUBBEDPPi0StrictCutsDariaPhiRandBGSub.root","recreate");	

//gROOT->ProcessLine("DoSubtraction();");

//ofile->Close();
//}

//void DoSubtraction(){

 //  string dirs[3] = {"BG","Sig", "Cut1"};
//  string dirs[3] = {"Random","Sig", "Cut1"};
  string dirs[5] = {"Random","TimeCoinc", "Cut1","SignalTiming","BackgroundTiming"};
//  string dirs[1] = { "Cut1"};
  //  string dirs[4] = {"NPipPi0","PPi0Pim","Sig", "Cut1"};
  
  

  
  vector<TString> histNames;
  vector<TString> phihistNames;
  vector<Double_t> VecSigma;
  vector<Double_t> VecSigmaErr;
  vector<Double_t> VecCosth;
  vector<Double_t> VecCosthErr;


  vector<string> VecFolder;
  vector<Double_t>  VecAllEg;		
  vector<Double_t>  VecAllSigma;		
  vector<Double_t>  VecAllCosth;		
  vector<Double_t>  VecAllEgErr;		
  vector<Double_t>  VecAllSigmaErr;		
  vector<Double_t>  VecAllCosthErr;		

  Int_t BinsCounter = 0;



  // all histograms for each bin
 // for (int i=0; i<5; i++) {
    //  for (int i=0; i<4; i++) {
	


				
    TDirectory *weightsDir = infile->GetDirectory(dirs[3].c_str());	//WeightsDir is top lev folder
    TIter	nextTbinDir(weightsDir->GetListOfKeys());
    TKey 	*tbinKey;

	TDirectory *outWeightsDir = ofile->mkdir(dirs[3].c_str());
			
    while ((tbinKey=(TKey*)nextTbinDir())) {
			
      TDirectory *tbinDir = weightsDir->GetDirectory(tbinKey->GetName()); //tbinDir is my W var.
      TIter	nextEbinDir(tbinDir->GetListOfKeys());
      TKey 	*ebinKey;

	TDirectory *outTBinDir = outWeightsDir->mkdir(tbinKey->GetName());
				
      while ((ebinKey=(TKey*)nextEbinDir())) {
					
	TDirectory *ebinDir = tbinDir->GetDirectory(ebinKey->GetName()); //ebinDir is my costh
	TIter nextPolbinDir(ebinDir->GetListOfKeys());
	TKey  *polbinKey;

	TDirectory *outEBinDir = outTBinDir->mkdir(ebinKey->GetName());

	while ((polbinKey=(TKey*)nextPolbinDir())){   //Looping round my polarisation states - +

	  TDirectory *polbinDir = ebinDir->GetDirectory(polbinKey->GetName());
	  TIter	nextHist(polbinDir->GetListOfKeys());
	  TKey	*histKey;

	TDirectory *outPolBinKey = outEBinDir->mkdir(polbinKey->GetName());
		outPolBinKey->cd();			
	  int histNum = 0;
	  while ((histKey=(TKey*)nextHist())) {
									
	    histNum++;

	//Getting  Signal and bg histo
	  TH1F* hist = (TH1F*) histKey->ReadObj();
	  TString histBgName ="/" + dirs[4] + "/" + (TString)tbinDir->GetName()+ "/"  +  (TString)ebinDir->GetName() + "/" + (TString)polbinDir->GetName() + "/" + (TString)histKey->GetName() ;
   	  TH1F* histBg = (TH1F*)infile->Get(histBgName); 

	//Adding signal and bg histo based on ratio of two windows
	  hist->Add(histBg,-1);

	  hist->Write();  //Sort out file name and set up directory structure in outfile

	    TString IsPhi = (TString)histKey->GetName();
	    TString IsPolPos = (TString)polbinDir->GetName();

	    if(IsPhi=="Phi" && IsPolPos=="PolStateD-0.50_"){
/*	      BinsCounter = BinsCounter+1;
	      string thetabin = (string)ebinDir->GetName() ;
	      Double_t thetalen = thetabin.size();
	      string thetabin3 = thetabin.substr(5,thetalen -1 );
	      Double_t CosthBin = stod(thetabin3); //Can I cast straight to double here?
	      cout << dirs[i]  << CosthBin << " Costh " <<"Sigma=Par1/AvePol  " << Sigma << "=" << Par1 << "/"<< AvePol  <<endl;
	      VecSigma.push_back(Sigma);
	      VecSigmaErr.push_back(Err1);
	      VecCosth.push_back(CosthBin);
	      VecCosthErr.push_back(0.1);

	      VecAllSigma.push_back(Sigma);		
	      VecAllCosth.push_back(CosthBin);		
	      TString EgbinName = (TString)tbinDir->GetName();
	      string EgbinName2 = (string)EgbinName(10,6);
	      Double_t Egbin = stod(EgbinName2);
	      VecAllEg.push_back(Egbin);		
	      VecFolder.push_back(dirs[i]);

	      VecAllEgErr.push_back(10);		
	      VecAllSigmaErr.push_back(Err1);		
	      VecAllCosthErr.push_back(0.05);		
*/
	    } //Closing if 
	  }  //Closing while hist key		
	}   //Closing while nextPolbin
      }    //Closing while nextEbindir costh
      TString Wbin = (TString)tbinDir->GetName();
      TString Wname = dirs[3] +  (TString)tbinDir->GetName();
      //	Double_t WbinD =(Double_t) Wbin(10,6);
      string WbinString =(string)Wbin(10,6);
      Double_t WbinD =stod(WbinString);
      VecCosth.clear();
      VecCosthErr.clear();
      BinsCounter=0;
    }     //Closing while nextTbindir W

ofile->Close();
} //closing main function
	

